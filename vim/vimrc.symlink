let mapleader=","

set nocompatible
set encoding=utf-8
set termguicolors

syntax enable
set synmaxcol=800           " don't try to highlight long lines
set ruler       " show the cursor position all the time
set cursorline  " highlight the line of the cursor
set showcmd     " show partial commands below the status line
set shell=sh
set textwidth=80

"" Whitespace
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set autoindent
set smartindent                   " be smart about it
set expandtab                     " use spaces, not tabs
set softtabstop=2
set nolist                          " don't Show invisible characters

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" Auto-reload buffers when file changed on disk
set autoread

" Disable swap files; systems don't crash that often these days
set updatecount=0

set backspace=indent,eol,start    " backspace through everything in insert mode

set nojoinspaces
set showbreak=↪\ 

"" Searching
set hlsearch                      " highlight matches
set incsearch                     " incremental searching
set ignorecase                    " searches are case insensitive...
set smartcase                     " ... unless they contain at least one capital letter

"----------------------------------------------------------------------
" Telescope
"----------------------------------------------------------------------
nnoremap <leader>f <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>b <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>
nnoremap <leader>R <cmd>lua require('telescope.builtin').lsp_references()<cr>

map <leader>i <Cmd>lua vim.lsp.buf.hover()<CR>
map <leader>T <cmd>lua vim.lsp.buf.type_definition()<CR>
map <leader>S <cmd>lua vim.lsp.buf.document_symbol()<CR>
map <leader>C <cmd>lua vim.lsp.buf.incoming_calls()<CR>
map <leader>rn <cmd>lua vim.lsp.buf.rename()<CR>
map <leader>l <cmd>lua vim.lsp.diagnostic.goto_next()<CR>


"----------------------------------------------------------------------
" End Telescope
"----------------------------------------------------------------------

augroup vimrcEx
  autocmd!
  " Avoid showing trailing whitespace when in insert mode
  au InsertEnter * :set listchars-=trail:•
  au InsertLeave * :set listchars+=trail:•
  
  " Some file types use real tabs
  au FileType {make,gitconfig} setl noexpandtab
  
  " Make sure all markdown files have the correct filetype set and setup wrapping
  " au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown | call s:setupWrapping()

  " Treat JSON files like JavaScript
  au BufNewFile,BufRead *.json setf javascript
  
  " Remember last location in file, but not for commit messages.
  " see :help last-position-jump
  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif
    
  " format md files to 80 chars
  au BufRead,BufNewFile *.md setlocal textwidth=80
  
  au filetype plugin indent on
augroup END

" don't use Ex mode, use Q for formatting
map Q gq

" clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>

" Show leader keystrokes in the bottom right
set showcmd

" yank to system clipboard
map <leader>y "*y

" paste lines from unnamed register and fix indentation
nmap <leader>p pV`]=
nmap <leader>P PV`]=

map <leader>. :e .<cr>

" ignore Bundler standalone/vendor installs & gems
set wildignore+=bundle/**,vendor/bundle/**,vendor/cache/**,vendor/gems/**
set wildignore+=*/node_modules/*
set wildignore+=.DS_Store

" toggle between last open buffers
nnoremap <leader><leader> <c-^>

set splitright
set splitbelow

set showmatch              " brackets/braces that is
set mat=3                  " duration to show matching brace (1/10 sec)
set laststatus=2           " always show the status line

" word auto complete (?)
set complete+=kspell
set spelllang=en
set spellfile=$HOME/Dropbox/nvim/spell/en.utf-8.add
nmap <silent> <leader>s :set spell!<CR>

" spell check when writing commit logs and markdown files
autocmd filetype svn,*commit* setlocal spell
autocmd BufRead,BufNewFile *.md setlocal spell

" map jk to escape key
:imap jk <Esc>


let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1

let g:tagbar_width = max([40, winwidth(0) / 4])

" automatically highlight variable your cursor is on
let g:go_auto_sameids = 0

set textwidth=80
set colorcolumn=+1
hi ColorColumn guibg=#2d2d2d ctermbg=236
highlight clear SignColumn 

" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 2

" copied from Evan:
let g:go_term_enabled = 1
let g:go_term_mode = "split"
let g:go_term_height = 10

let g:go_list_autoclose = 1
let g:go_doc_keywordprg_enabled = 0
let g:go_code_completion_enabled = 0

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Added for vault website (?)
set backupcopy=yes

" colorscheme dracula
colorscheme nightfly
" set background=dark
" set background=""

" Show full path of filename
function! FilenameForLightline()
    " returns something like database/backend.go
    " return expand("%:h:t") . '/' .expand('%:t')
    return expand("%-.50F")
endfunction

""""""
" See colors for onehalf below
""""""
" let g:lightline = {
"       \ 'colorscheme': 'wombat',
"       \ 'active': {
"       \   'left': [ [ 'mode', 'paste' ],
"       \             [ 'readonly', 'filename', 'modified' ] ]
"       \ },
"       \ 'component_function': {
"       \   'filename': 'FilenameForLightline'
"       \ },
"       \ }
""""""
""""""
      
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes


let g:LanguageClient_loggingLevel = 'INFO'
let g:LanguageClient_virtualTextPrefix = ''
let g:LanguageClient_loggingFile =  expand('/Users/clint/LanguageClient.log')
let g:LanguageClient_serverStderr = expand('/Users/clint/LanguageServer.log')

" -------------------------------------------------------------------------------------------------
" begin things lifted from Evan's vimrc
" -------------------------------------------------------------------------------------------------

set wildmenu     " fancy command completion menu!
set wildmode=list:longest


set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set showbreak=+ " display a + at the beginning of a wrapped line

set listchars=tab:»·,trail:· " show tabs and trailing spaces
set listchars=tab:»·,trail:· " show tabs and trailing spaces
set listchars+=extends:»     " show a » when a line goes off the right
                             " edge of the screen
set listchars+=precedes:«    " show a « when a line goes off the left
                             " edge of the screen

set hlsearch   " highlight searches

packloadall
silent! helptags ALL

" -------------------------------------------------------------------------------------------------
" end things lifted from Evan's vimrc
" -------------------------------------------------------------------------------------------------

" if hidden is not set, TextEdit might fail.
set hidden

let g:terraform_align=1
" let g:terraform_fmt_on_save=1

""""
" tags
""""
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

map <leader>gt :TagbarToggle<CR>
imap <leader>gt <esc>:TagbarToggle<CR>i
""""
" end tags
""""

let g:indent_blankline_char_list = ['|', '¦', '┆', '┊']
let g:indent_blankline_use_treesitter = v:true
let g:indent_blankline_show_trailing_blankline_indent = v:false

" old compe things
" inoremap <silent><expr> <C-Space> compe#complete()
" inoremap <silent><expr> <C-e>     compe#close('<C-e>')
" inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
" inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })

autocmd BufWritePre *.go lua goimports(1000)
" -- 
" -- set completeopt=menuone,noselect

"    " disable cursor keys in normal mode
"    map <Left>  :echo "no!"<cr>
"    map <Right> :echo "no!"<cr>
"    map <Up>    :echo "no!"<cr>
"    map <Down>  :echo "no!"<cr>

" autocmd BufWritePre,BufNewFile,BufRead *.hcl set syntax=tf
" autocmd BufNewFile,BufRead *.wpvars setf hcl

lua <<EOF
  require'lspconfig'.terraformls.setup{}
EOF
autocmd BufWritePre *.tfvars lua vim.lsp.buf.format()
autocmd BufWritePre *.tf lua vim.lsp.buf.format()
autocmd BufWritePre *.hcl lua vim.lsp.buf.format()

let g:tagbar_ctags_bin = '/opt/homebrew/bin/ctags'

" Rust things, maybe
let g:rustfmt_autosave = 1
let g:rust_clip_command = 'pbcopy'
" End Rust things

""""""""
" Colors according to https://github.com/sonph/onehalf/blob/master/vim/README.md
""""""""

if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

syntax on
set t_Co=256
set cursorline
" colorscheme onehalfdark
let g:lightline = {
      \ 'colorscheme': 'onehalfdark',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'filename': 'FilenameForLightline'
      \ },
      \ }

""""""""
" End Colors according to https://github.com/sonph/onehalf/blob/master/vim/README.md
""""""""